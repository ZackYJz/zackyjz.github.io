<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZackYJ&#39;s Blog</title>
    <link>https://blog.wvuuvw.xyz/posts/</link>
    <description>Recent content in Posts on ZackYJ&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 14 Nov 2021 11:25:05 -0400</lastBuildDate><atom:link href="https://blog.wvuuvw.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构：并查集介绍和实现</title>
      <link>https://blog.wvuuvw.xyz/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 14 Nov 2021 11:25:05 -0400</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%AE%9E%E7%8E%B0/</guid>
      <description>并查集也叫不相交集合，是一种树状结构，适合解决集合连接等相关问题
 介绍  并查集解决的问题：
 有若干个样本a、b、c、&amp;hellip;类型假设是V 在并查集中一开始认为每个样本都在单独的集合里   并查集的三个核心操作（常数级复杂度）：
 Find(V)/findRepresent(V) 查找元素所在的集合根节点（或代表节点） boolean isSameSet（Vx，Vy） 查询样本x和样本y是否属于一个集合 void union(Vx，Vy) 把x和y各自所在集合的所有样本合并成一个集合  实现  数组实现 如果并查集中值存储整型元素，可以使用数组来实现：
 数组下标为 i 的元素为 i 的父节点
 Quick Find   Union -合并：将v1所在集合的所有元素都嫁接到v2的父节点上
  即：将下标v1的元素的值（父节点）改为下标v2元素的值（父节点）
  原来父节点是v1的节点，父节点也改为 v2
public void union(int v1,int v2){ int p1 = find(v1); int p2 = find(v2); if(p1 == p2) { return; } for(int i = 0;i&amp;lt;parents.length;i++){ if(parents[i] == p1){ parents[i] = p2; } } }  扫描了一遍数组，时间复杂度O(n)      Find -查找元素所在集合（父节点）</description>
    </item>
    
    <item>
      <title>Redis/Bitmap类型使用及原理</title>
      <link>https://blog.wvuuvw.xyz/posts/bitmap-%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Feb 2021 13:31:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/bitmap-%E7%B1%BB%E5%9E%8B/</guid>
      <description>BitMap 也叫位图
是一种使用一个字节的 8 位 bit 的 01 状态来统计二值状态的数据类型
   二值统计：集合元素的取值就只有0和1两种，通常用于状态的统计
例如：登录情况、打卡情况、日活统计等
  原理 本质是由 0 和 1 两种状态表现组成的二进制位的bit数组，但底层使用 Redis/String 类型实现
  存储时，实际存储的是一个 8bit bitmap 代表的 ASCII 码所对应的字符
  使用 get 指令可以获得这个 二进制位对应的 ASCII 码符号
  基本指令   setbit key offset value
 offset 位偏移，每八位一个byte 作为 bitmap,自动扩容 value 值只能是 0 或 1     getbit key offset
  strlen</description>
    </item>
    
    <item>
      <title>SSM整合：分层配置和整合</title>
      <link>https://blog.wvuuvw.xyz/posts/ssm-%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</link>
      <pubDate>Tue, 05 Jan 2021 15:23:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/ssm-%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</guid>
      <description>创建 WEB 项目  Web模块支持  在 IDEA 中创建 Maven 项目，添加 web模板，或在一个普通 Maven 项目中添加 Web模块支持 右键项目 Add Framework Support   配置文件准备   [可选]mybatis-config.xml
 Mybatis 核心配置文件，最终会整合到 Spring 中配置    spring-dao：Dao 层 整合 Mybatis 层
 DTO 约束，同 spring-service  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/springbeans. xsd&amp;#34;&amp;gt; &amp;lt;/beans&amp;gt;   spring-service：Service 层，Spring 和配置文件
  spring-mvc：Controller 层，SpringMVC 核心配置文件
 DTO 约束  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.</description>
    </item>
    
    <item>
      <title>转账案例-引入事务和AOP改造</title>
      <link>https://blog.wvuuvw.xyz/posts/%E8%BD%AC%E8%B4%A6%E6%A1%88%E4%BE%8B-%E5%BC%95%E5%85%A5%E4%BA%8B%E5%8A%A1%E5%92%8C-aop-%E6%94%B9%E9%80%A0/</link>
      <pubDate>Sun, 03 Jan 2021 08:31:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/%E8%BD%AC%E8%B4%A6%E6%A1%88%E4%BE%8B-%E5%BC%95%E5%85%A5%E4%BA%8B%E5%8A%A1%E5%92%8C-aop-%E6%94%B9%E9%80%A0/</guid>
      <description>基础功能  spring 整合 DBUtils ，实现简单的用户转账业务
  Account 实体类
public class Account { private Integer id; private String name; private Double money; // setter getter.... }   AccountDao 接口和实现类
  public interface AccountDao { // 转出操作  void out(String outUser, Double money); // 转入操作  void in(String inUser, Double money); }   @Repository public class AccountDaoImpl implements AccountDao { @Autowired private QueryRunner queryRunner; @Override public void out(String outUser, Double money) { try { queryRunner.</description>
    </item>
    
    <item>
      <title>常见三大数据库连接池使用及工具类抽取</title>
      <link>https://blog.wvuuvw.xyz/posts/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Wed, 18 Nov 2020 11:25:05 -0400</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>DBCP DBCP 是Apache成员之一，在企业开发中也比较常见，也是tomcat内置的连接池
DBCP 工具类 public class DBCPUtils { //1.定义常量 保存数据库连接的相关信息  public static final String DRIVERNAME = &amp;#34;com.mysql.jdbc.Driver&amp;#34;; public static final String URL = &amp;#34;jdbc:mysql://localhost:3306/db5?characterEncoding=UTF-8&amp;#34;; public static final String USERNAME = &amp;#34;root&amp;#34;; public static final String PASSWORD = &amp;#34;123456&amp;#34;; //2.创建连接池对象 (有DBCP提供的实现类)  public static BasicDataSource dataSource = new BasicDataSource(); //3.使用静态代码块进行配置  static{ dataSource.setDriverClassName(DRIVERNAME); dataSource.setUrl(URL); dataSource.setUsername(USERNAME); dataSource.setPassword(PASSWORD); dataSource.setMaxActive(20); } //4.获取连接的方法  public static Connection getConnection() throws SQLException { //从连接池中获取连接  Connection connection = dataSource.</description>
    </item>
    
    <item>
      <title>自定义数据库连接池的实现</title>
      <link>https://blog.wvuuvw.xyz/posts/jdbc%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 14 Nov 2020 11:25:05 -0400</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/jdbc%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AE%9E%E7%8E%B0/</guid>
      <description>背景 数据库连接池用于分配、管理和释放（归还）数据库连接对象 Connection
 有了数据库连接池，可以允许应用重复使用一个现有的数据库连接 从而避免了频繁创建和释放连接，消耗系统资源  最常用的第三方连接池有DBCP、 C3p0、Druid 等，本文实现一个具有基本功能的连接池
基本功能 JDBC 中 java.sql.DataSource 接口定义了数据库连接池的规范
 代表一个数据源，可以用于实现连接池 获取数据库连接对象的方法：Connection getConnection();  覆写这个接口中的方法，可实现基本的连接池功能：
 定义一个类，实现DataSource接口 定义一个容器，保存多个Connection连接对象 定义静态代码块，通过JDBC工具类获取多个连接保存到容器中 ==重写getConnection方法，从容器获取连接并返回== 定义getSize方法，获取容器大小并返回  public class MyDataSource implements DataSource{ //1.定义集合容器，用于保存多个数据库连接对象  //Collections.synchronizedList可以将普通集合转成线程安全集合  private static List&amp;lt;Connection&amp;gt; pool = Collections.synchronizedList(new ArrayList&amp;lt;Connection&amp;gt;()); //2.定义静态代码块，生成10个数据库连接保存到集合中  static { for (int i = 0; i &amp;lt; 10; i++) { Connection con = JDBCUtils.getConnection(); pool.add(con); } } //返回连接池的大小  public int getSize() { return pool.</description>
    </item>
    
    <item>
      <title>简易多人聊天室[2]-NIO模型实现</title>
      <link>https://blog.wvuuvw.xyz/posts/%E7%AE%80%E6%98%93%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4-nio%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 02 May 2020 13:31:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/%E7%AE%80%E6%98%93%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4-nio%E5%AE%9E%E7%8E%B0/</guid>
      <description>总体流程    ServerSocketChannel 注册 ACCEPT 事件监听到 Selector 中，用于监听 accept 事件
 当有一个客户端发出连接请求，服务器接收了客户端连接请求时，即触发了 ServerSocketChannel 的 accept 事件 与 BIO 模型中 ServerSocket.accept() 执行的事件相同，即接收了该客户端的连接请求    ServerSocketChannel 触发 accept 事件后，服务器端处理新建立连接的客户端
 得到客户端对应的 SocketChannel 将新连接的客户端的 SocketChannel 注册 READ 事件在 Selector 中   即让 Selector 监控客户端的 SocketChannel 是否触发 READ (可读) 事件
  触发时机：当该客户端像服务器发送了数据，其 SocketChannel 上有了可供服务器读取的数据时，触发 READ 事件
   对可读事件触发后的处理操作和 BIO 类似：读取 SocketChannel 的数据并转发给当前连接到服务器的其他客户端
但在 NIO 中，处理客户端连接的操作都是在同一个线程中进行
    注意</description>
    </item>
    
    <item>
      <title>Java 四种本地文件拷贝方式比较和测试</title>
      <link>https://blog.wvuuvw.xyz/posts/java%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Mon, 13 Apr 2020 13:31:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/java%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/</guid>
      <description>准备工作  为了便于测试，定义一个文件拷贝的接口让测试类去继承它：
public interface IFileCopy { void copyFile(File source, File dest); } 无论是 Stream 还是 Channel ，用完都需要调用 close()方法关闭
为了防止重复代码，这里统一写一个关闭的方法：
static void close(Closeable closeable){ if(closeable != null){ try { closeable.close(); } catch (IOException e) { e.printStackTrace(); } } } 实现  不带缓冲区的流拷贝   最朴素的文件拷贝方式，不使用带任何缓冲区的流装饰
  从源文件的输入流一个字节一个字节读取
只要还有数据 （read() 返回 ≠ -1）就循环读取并写入目标文件的输出流
  static class noBufferedStreamCopy implements IFileCopy{ @Override public void copyFile(File source, File dest) { InputStream is = null; OutputStream os = null; try { //创建文件输入流  is = new FileInputStream(source); //创建文件输出流  os = new FileOutputStream(dest); int result; //一个字节一个字节读，读到就输出到文件输出流  while ((result = is.</description>
    </item>
    
    <item>
      <title>SSM整合：分层配置和整合</title>
      <link>https://blog.wvuuvw.xyz/posts/redis%E7%BC%93%E5%AD%98%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/redis%E7%BC%93%E5%AD%98%E6%A1%88%E4%BE%8B/</guid>
      <description>查询  查询先查 Reids
  先从 Redis 里查询，如果有数据直接返回，没有再去查询 Mysql 从 MySQL 查询到数据后，需要将数据写回 Redis 以保障下一次缓存命中 User user = null; String key = CACHE_KEY_USER+id; //先从redis里面查询  user = (User) redisTemplate.opsForValue().get(key); if(user == null) { // redis里面无，继续查询mysql  user = userMapper.selectByPrimaryKey(id); if(user == null) { //都无数据,返回空数据  return user; }else{ //数据写回 redis  redisTemplate.opsForValue().set(key,user); } } return user;     实际生产环境中，通常 redis 的 key 都会设置过期时间，如果正好遇到过期时间到期，某个热点 key 突然失效，会导致缓存击穿问题
 击穿：缓存先击中(一开始 Redis 中有数据），但热点 key 突然失效</description>
    </item>
    
  </channel>
</rss>
