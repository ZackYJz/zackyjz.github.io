<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IO on ZackYJ&#39;s Blog</title>
    <link>https://blog.wvuuvw.xyz/tags/io/</link>
    <description>Recent content in IO on ZackYJ&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 02 May 2020 13:31:23 +0800</lastBuildDate><atom:link href="https://blog.wvuuvw.xyz/tags/io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>简易多人聊天室[2]-NIO模型实现</title>
      <link>https://blog.wvuuvw.xyz/posts/%E7%AE%80%E6%98%93%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4-nio%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 02 May 2020 13:31:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/%E7%AE%80%E6%98%93%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4-nio%E5%AE%9E%E7%8E%B0/</guid>
      <description>总体流程    ServerSocketChannel 注册 ACCEPT 事件监听到 Selector 中，用于监听 accept 事件
 当有一个客户端发出连接请求，服务器接收了客户端连接请求时，即触发了 ServerSocketChannel 的 accept 事件 与 BIO 模型中 ServerSocket.accept() 执行的事件相同，即接收了该客户端的连接请求    ServerSocketChannel 触发 accept 事件后，服务器端处理新建立连接的客户端
 得到客户端对应的 SocketChannel 将新连接的客户端的 SocketChannel 注册 READ 事件在 Selector 中   即让 Selector 监控客户端的 SocketChannel 是否触发 READ (可读) 事件
  触发时机：当该客户端像服务器发送了数据，其 SocketChannel 上有了可供服务器读取的数据时，触发 READ 事件
   对可读事件触发后的处理操作和 BIO 类似：读取 SocketChannel 的数据并转发给当前连接到服务器的其他客户端
但在 NIO 中，处理客户端连接的操作都是在同一个线程中进行
    注意</description>
    </item>
    
    <item>
      <title>Java 四种本地文件拷贝方式比较和测试</title>
      <link>https://blog.wvuuvw.xyz/posts/java%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Mon, 13 Apr 2020 13:31:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/java%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/</guid>
      <description>准备工作  为了便于测试，定义一个文件拷贝的接口让测试类去继承它：
public interface IFileCopy { void copyFile(File source, File dest); } 无论是 Stream 还是 Channel ，用完都需要调用 close()方法关闭
为了防止重复代码，这里统一写一个关闭的方法：
static void close(Closeable closeable){ if(closeable != null){ try { closeable.close(); } catch (IOException e) { e.printStackTrace(); } } } 实现  不带缓冲区的流拷贝   最朴素的文件拷贝方式，不使用带任何缓冲区的流装饰
  从源文件的输入流一个字节一个字节读取
只要还有数据 （read() 返回 ≠ -1）就循环读取并写入目标文件的输出流
  static class noBufferedStreamCopy implements IFileCopy{ @Override public void copyFile(File source, File dest) { InputStream is = null; OutputStream os = null; try { //创建文件输入流  is = new FileInputStream(source); //创建文件输出流  os = new FileOutputStream(dest); int result; //一个字节一个字节读，读到就输出到文件输出流  while ((result = is.</description>
    </item>
    
  </channel>
</rss>
