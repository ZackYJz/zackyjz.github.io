<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>缓存 on ZackYJ&#39;s Blog</title>
    <link>https://blog.wvuuvw.xyz/tags/%E7%BC%93%E5%AD%98/</link>
    <description>Recent content in 缓存 on ZackYJ&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 03 Jan 2021 09:31:23 +0800</lastBuildDate><atom:link href="https://blog.wvuuvw.xyz/tags/%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>经典缓存设计思路</title>
      <link>https://blog.wvuuvw.xyz/posts/%E7%BB%8F%E5%85%B8%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 03 Jan 2021 09:31:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/%E7%BB%8F%E5%85%B8%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</guid>
      <description>平时使用 Spring 开发后台时，经常使用 Spring 提供的注解来控制缓存的读写和更新
常见的注解有：
  @EnableCaching 主程序开启缓存
  @CacheConfig 类注解，描述该类中方法使用的缓存名称
  @Cacheable 方法注解，通常加在查询方法上，表示将方法的返回值缓存
  @CachePut 方法注解，通常加载更新方法上，当数据库中数据更新后缓存数据也更新
  @CacheEvict 方法注解，通常加在删除方法上，当数据库中数据删除后相关缓存数据自动清除
  使用步骤
 添加 spring-boot-starter-cache 依赖坐标 在启动类上使用 @EnableCaching 开启缓存 使用 CacheManager 初始化要使用的缓存框架，添加@CacheConfig注入要使用的资源 在方法上使用各种方法注解来控制缓存   在一般的系统中这样设计没有问题，但如果考虑高并发场景，或者不使用 Spring 框架的情况下，就需要参照注解的实现思路进行额外设计
 Cache Aside Pattern 边缘缓存模式：经典的缓存+数据库的读写模式，Spring cache 就使用这种方式
数据读过程
  每次读取数据，都从 cache 里读
 如果读不到 cache 的数据，则从 db 里查询，此时缓存未命中（ miss） 如果读到数据则直接返回，此时缓存命中（ hit）    将读取的数据加入缓存，下次读取时就能直接命中</description>
    </item>
    
    <item>
      <title>Redis缓存设计案例</title>
      <link>https://blog.wvuuvw.xyz/posts/redis%E7%BC%93%E5%AD%98%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Sat, 02 Jan 2021 18:31:23 +0800</pubDate>
      
      <guid>https://blog.wvuuvw.xyz/posts/redis%E7%BC%93%E5%AD%98%E6%A1%88%E4%BE%8B/</guid>
      <description>查询  查询先查 Reids
  先从 Redis 里查询，如果有数据直接返回，没有再去查询 Mysql 从 MySQL 查询到数据后，需要将数据写回 Redis 以保障下一次缓存命中 User user = null; String key = CACHE_KEY_USER+id; //先从redis里面查询  user = (User) redisTemplate.opsForValue().get(key); if(user == null) { // redis里面无，继续查询mysql  user = userMapper.selectByPrimaryKey(id); if(user == null) { //都无数据,返回空数据  return user; }else{ //数据写回 redis  redisTemplate.opsForValue().set(key,user); } } return user;     实际生产环境中，通常 redis 的 key 都会设置过期时间，如果正好遇到过期时间到期，某个热点 key 突然失效，会导致缓存击穿问题
 击穿：缓存先击中(一开始 Redis 中有数据），但热点 key 突然失效</description>
    </item>
    
  </channel>
</rss>
